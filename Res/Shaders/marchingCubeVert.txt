#version 400 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 UV;
layout (location = 2) in vec3 normal;

const int MAX_LIGHTS = 4;

out vec3 surfaceNormal;
out vec3 toCameraVector;
out vec3 toLightVector[MAX_LIGHTS];
out float visibility; //fog
out float heightPercent;

uniform mat4 projectionMatrix = mat4(1.0f);
uniform mat4 viewMatrix = mat4(1.0f);
uniform mat4 modelMatrix = mat4(1.0f);

uniform vec3 lightPos[4];

uniform float terrainScale;

uniform float density = 0.0035; //density of the fog
uniform float gradient = 5.0; //how the fog shifts from complete fog to no fog

void main(void){
	vec4 worldPos = modelMatrix * vec4(terrainScale * position, 1.0);
	vec4 positionRelativeToCamera = viewMatrix * worldPos;
 	gl_Position = projectionMatrix * positionRelativeToCamera;
	
	surfaceNormal = normalize((modelMatrix * vec4(normal, 0.0f)).xyz);
	for(int i = 0; i < MAX_LIGHTS; i++) {
		toLightVector[i] = lightPos[i] - worldPos.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPos.xyz;
	
	float distanceFromCamera = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distanceFromCamera * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	visibility = 1.0;
	
	heightPercent = 1 - worldPos.y / 200.0f;
}