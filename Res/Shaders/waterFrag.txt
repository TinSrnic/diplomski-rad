#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D DuDvMapTexture;
uniform sampler2D normalMapTexture;
uniform sampler2D depthMapTexture;

uniform float waveStrength;
uniform float moveFactor;

uniform float waterRefraction;

uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;

uniform float near;
uniform float far;
uniform float maxWaterDepth;

uniform float drawDistance;

void main(void){
	//normalized device space http://antongerdelan.net/opengl/raycasting.html
	vec2 NDS = clipSpace.xy / clipSpace.w;
	//conversion to openGL coords
	NDS = NDS / 2.0 + 0.5;
	vec2 reflectionCoords = vec2(NDS.x, -NDS.y);
	vec2 refractionCoords = vec2(NDS.x, NDS.y);
	
	float depth = texture(depthMapTexture, refractionCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float waterDepth = floorDistance - waterDistance;
	
	vec2 distortedTexCoords = texture(DuDvMapTexture, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactor);
	vec2 totalDistortion = (texture(DuDvMapTexture, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;
	//soft edge
	totalDistortion = totalDistortion * clamp(waterDepth / 20.0, 0.0, 1.0);
	
	reflectionCoords += totalDistortion;
	reflectionCoords.x = clamp(reflectionCoords.x, 0.001, 0.999);
	reflectionCoords.y = clamp(reflectionCoords.y, -0.999, -0.001);
	
	refractionCoords += totalDistortion;
	refractionCoords = clamp(refractionCoords, 0.001, 0.999);
	
	vec4 reflection = texture(reflectionTexture, reflectionCoords); //50 = waterDepth, how far under you can see
	vec4 refraction = texture(refractionTexture, refractionCoords) * (1.0 - clamp(waterDepth / 50.0, 0.0, 1.0));
	
	vec4 normalColor = texture(normalMapTexture, distortedTexCoords);
	vec3 normal = vec3(normalColor.r * 2.0 - 1.0, normalColor.b * 3.0, normalColor.g * 2.0 - 1.0);
	normal = normalize(normal);
	
	vec3 unitCamera = normalize(toCameraVector);
	float refractionFactor = dot(unitCamera, normal);
	//more or less reflection, frenel effect
	refractionFactor = pow(refractionFactor, waterRefraction); 
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, unitCamera), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColor * specular * reflectivity * clamp(waterDepth / 5.0, 0.0, 1.0);
	
	out_color = mix(reflection, refraction, refractionFactor);
	out_color = mix(out_color, vec4(0.0, 0.3, 0.5, 1.0), 0.2) + vec4(specularHighlights, 0.0);
	out_color.a = clamp(waterDepth / maxWaterDepth, 0.0, 1.0);
}