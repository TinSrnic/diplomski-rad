#version 430
#define PI 3.1415926538
#define sensorOffsetDst 7
uniform int width;
uniform int height;
uniform float deltaTime;
layout (binding = 0, rgba8) uniform image2D destTex;
layout (local_size_x = 64) in;
float moveSpeed = 100.0;
float turnSpeed = 100.0;
int sensorSize = 3;

struct Agent {
    vec2 position;
    float angle;
	vec4 speciesMask;
};

layout (std430, binding=1) buffer test {
	Agent agents[];
};

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

float sense(Agent agent, float angle) {
	float sensorAngle = agent.angle + angle;
	vec2 sensorDir = vec2(cos(sensorAngle), sin(sensorAngle));

	vec2 sensorPos = agent.position + sensorDir * sensorOffsetDst;
	ivec2 sensorCentre = ivec2(sensorPos);

	float sum = 0;

	vec4 senseWeight = agent.speciesMask * 2 - 1;

	for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX++) {
		for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY++) {	
			int sampleX = min(width - 1, max(0, sensorCentre.x + offsetX));
			int sampleY = min(height - 1, max(0, sensorCentre.y + offsetY));
			sum += dot(senseWeight, imageLoad(destTex, ivec2(sampleX, sampleY)));
		}
	}

	return sum;
}

void main() {
	float trailWeight = 100;
	uint id = gl_GlobalInvocationID.x;
	
	float random = rand(agents[id].position);
	
	float senseAngle = (60.0 / 180.0) * PI;
	float weightForward = sense(agents[id], 0);
	float weightLeft = sense(agents[id], senseAngle);
	float weightRight = sense(agents[id], -senseAngle);
	float randomSteer = (rand(vec2(random)) + 1) / 2;
	
	if(weightForward > weightLeft && weightForward > weightRight) {
		agents[id].angle += 0;
	} else if(weightForward < weightLeft && weightForward < weightRight) {
		agents[id].angle += (randomSteer - 0.5) * 2 * turnSpeed * deltaTime;
	} else if(weightRight > weightLeft) {
		agents[id].angle -= randomSteer * turnSpeed * deltaTime;
	} else if(weightLeft > weightRight) {
		agents[id].angle += randomSteer * turnSpeed * deltaTime;
	}
	
	vec2 direction = vec2(cos(agents[id].angle), sin(agents[id].angle));
	vec2 newPosition = agents[id].position + direction * moveSpeed * deltaTime;
	
	if(newPosition.x < 0 || newPosition.x >= width || newPosition.y < 0 ||newPosition.y >= height) {
		newPosition.x = min(width-1, max(0, newPosition.x));
		newPosition.y = min(height-1, max(0, newPosition.y));
		agents[id].angle = (rand(newPosition) + 1 / 2.0) * 2 * PI;
	} else {
		vec4 original = imageLoad(destTex, ivec2(newPosition));
		imageStore(destTex, ivec2(newPosition), clamp(original + agents[id].speciesMask * trailWeight * deltaTime, vec4(0, 0, 0, 0), vec4(1, 1, 1, 1)));
	}
	
	agents[id].position = newPosition;
}