#version 400 core

const int MAX_LIGHTS = 4;

in vec3 surfaceNormal;
in vec3 toCameraVector;
in vec3 toLightVector[4];
in float visibility;
in float heightPercent;
out vec4 outColor;

uniform vec3 lightColor[MAX_LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[MAX_LIGHTS];

uniform float drawDistance;

void main(void) {	
	vec3 unitNormal = surfaceNormal;
	vec3 unitCamera = normalize(toCameraVector);
	
	vec3 totalSpecular = vec3(0.0, 0.0, 0.0);
	vec3 totalDiffuse = vec3(0.0, 0.0, 0.0);
	
	vec4 topColor = vec4(202.0 / 255.0, 175.0 / 255.0, 145.0 / 255.0, 1.0);
	vec4 bottomColor = vec4(19.0 / 255.0, 133.0 / 255.0, 16.0 / 255.0, 1.0);
	vec4 totalColor = mix(topColor, bottomColor, heightPercent);
	
	for(int i = 0; i < MAX_LIGHTS; i++) {
		float distanceToLight = length(toLightVector[i]);
		float attenuationFactor = attenuation[i].x + attenuation[i].y * distanceToLight + attenuation[i].z * distanceToLight * distanceToLight;
		
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotL = dot(unitNormal, unitLightVector);
		float brightness = max(0.0f, nDotL);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attenuationFactor;
	
		vec3 unitLightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(unitLightDirection, unitNormal);
		
		float specularFactor = dot(unitCamera, reflectedLightDirection);
		specularFactor = max(specularFactor, 0.0);
		float specularDamp = pow(specularFactor, shineDamper);
		totalSpecular = totalSpecular + (specularDamp * reflectivity * lightColor[i]) / attenuationFactor;
	}
	
	//0.2 because it adds ambient light so that everything isn't black
	totalDiffuse = max(totalDiffuse, 0.2);
	
	totalColor = totalColor * vec4(totalDiffuse, 1.0) + vec4(totalSpecular, 0.0);
	totalColor = mix(vec4(skyColor, 1.0), totalColor, visibility);
	outColor = totalColor;
}